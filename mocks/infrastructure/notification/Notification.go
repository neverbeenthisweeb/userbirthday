// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"
	notification "userbirthday/infrastructure/notification"

	mock "github.com/stretchr/testify/mock"
)

// Notification is an autogenerated mock type for the Notification type
type Notification struct {
	mock.Mock
}

// Send provides a mock function with given fields: ctx, req
func (_m *Notification) Send(ctx context.Context, req notification.NotificationRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, notification.NotificationRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewNotification interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotification creates a new instance of Notification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNotification(t mockConstructorTestingTNewNotification) *Notification {
	mock := &Notification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
